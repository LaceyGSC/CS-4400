
======================
	Original psum1
======================

void psum1(float a[], float p[], long int n)
{
	long int i;
	p[0] = a[0];
	for (i = 1; i < n; i++)
		p[i] = p[i-1] + a[i];
}


==================================
	Original Solution for 5.12
==================================

void psum1a(float a[], float p[], long int n)
{
	long int i;
	float last_val, val;  // last_val holds p[i-1]; val holds p[i]
	last_val = p[0] = a[0];
	for (i = 1; i < n; i++) {
		val  = last_val + a[i];
		p[i] = val;
		last_val = val;
	}
}


============
	5.21 
============

2-way loop unrolling and reassociation:

void psum1a(float a[], float p[], long int n)
{
	long int i;
	int limit = n - 1;
	float last_val, val;  //  last_val holds p[i-1]; val holds p[i]
	int i_1 = 1;          //  i_1 holds i + 1
	last_val = p[0] = a[0];
	for (i = 1; i < limit; i += 2) {
		i_1 = i + 1;
		int a_i   = a[i];
		int a_i_1 = a[i_1];
		p[i] = last_val + a_i;
		val = last_val + (a_i + a_i_1);
		p[i_1] = val;
		last_val = val;
	}

	for (; i < n; i++) {
		val  = last_val + a[i];
		p[i] = val;
		last_val = val;
	}
}

WYLO .... When you get an answer from the teaching staff, either fix your psum1a() or start on your psum1b()



















