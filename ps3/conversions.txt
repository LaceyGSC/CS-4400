
================================================
	Decimal to Floating Point (add the bias)
================================================

Why do you add the bias? Because your going from a decimal to a crap-ton of 1s and 0s!

Convert 12,345 to floating point:

	1. Convert to binary:

		12345 / 2 = 6172 remainder 1  <--  LSB
		6172  / 2 = 3086 remainder 0
		3086  / 2 = 1543 remainder 0
		1543  / 2 =  771 remainder 1
		 771  / 2 =  385 remainder 1
		 385  / 2 =  192 remainder 1
		 192  / 2 =   96 remainder 0
		  96  / 2 =   48 remainder 0
		  48  / 2 =   24 remainder 0
		  24  / 2 =   12 remainder 0
		  12  / 2 =    6 remainder 0
		   6  / 2 =    3 remainder 0
		   3  / 2 =    1 remainder 1
		   1  / 2 =    0 remainder 1  <--  MSB

		11000000111001

	2. Shift the decimal, stopping just right of the MSB. The number of left shifts is the unbiased exponent (negative if you had to shift right):

		1.1000000111001 x 2^13

	3. Determine the bias (it is 2^(k-1) - 1, where k is the number of bits allocated to the exponent field).

		For single precision, 8 bits are allocated to the exponent. Thus the bias = 2^(8-1) - 1
		                                                                            2^(7)   - 1
		                                                                            128     - 1
		                                                                            127

		For double precision, 11 bits are allocated to the exponent. Thus the bias = 2^(11-1) - 1
		                                                                             2^(10)   - 1
		                                                                             1024     - 1
		                                                                             1023

	4. Obtain the biased exponent by adding the bias to the unbiased exponent:

		127 + 13 = 140

	5. Convert the biased exponent (140) to binary:

		140 / 2 = 70 remainder 0  <--  LSB
		 70 / 2 = 35 remainder 0
		 35 / 2 = 17 remainder 1
		 17 / 2 =  8 remainder 1
		  8 / 2 =  4 remainder 0
		  4 / 2 =  2 remainder 0
		  2 / 2 =  1 remainder 0
		  1 / 2 =  0 remainder 1  <--  MSB

		10001100

	6. Put it all together, setting the sign bit (0 = positive, 1 = negative), and padding the mantissa with zeros to the right.

		For single precision, 23 bits are allocated to the mantissa.
		For double precision, 52 bits are allocated to the mantissa.

		 0    10001100  10000001110010000000000
		sign  exponent         mantissa


=====================================================
	Floating Point to Decimal (subtract the bias)
=====================================================

Why do you subtract the bias? Because your going from a crap-ton of 1s and 0s to decimal!

Convert 01000110010000001110010000000000 to decimal:

	1. Separate the various fields:

		 0    10001100  10000001110010000000000
		sign  exponent         mantissa

	2. Convert the biased exponent to decimal:

		10001100 = 140

	3. Subtract the bias from the exponent (see above for how to determine the bias):

		13 = 140 - 127

		E  =  e  - Bias

	4. Write the implicit one, the binary point, and the mantissa, all multiplied by 2 raised to the unbiased exponent:

		1.1000000111001 x 2^13

	5. Shift the decimal R times, where R = unbiased exponent (right for positive, left for negative):

		11000000111001

	6. Convert to decimal:

		12,345

	7. Don't forget to make it negative if the sign bit is 1!



















