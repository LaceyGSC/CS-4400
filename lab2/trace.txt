          Stack "bottom"
----------------------------------  <---  main(), %rbp = 0x0, %rbx = 0x0, %rsp = 0x7fffffffe798
|                                |
|          saved %rbp            |    push %rbp
|                                |
----------------------------------  <---  %rsp = 0x7FFFFFFFE794
|                                |
|          saved %rbx            |    push %rbx
|                                |
----------------------------------  <---  %rsp = 0x7FFFFFFFE790
|                                |
|                                |
|                                |
----------------------------------    sub $0x8,%rsp
|                                |
|                                |
|                                |
----------------------------------  <---  %rsp = 0x7FFFFFFFE788
                                  
                                      mov %rsi, %rbx  --->  %rbx = 0x7fffffffe878  //  is %rsi equal to the address of argv (i.e. the second argument to main)?

                                      cmp $0x1, %edi  --->  ZF = $edi - 0x1        //  is %edi equal to the value of argc (i.e. the first argument to main)?

                                      jne 400d52                                   //  this is skipped when you don't provide an argument to bomb

                                      mov 0x203157(%rip), %rax  --->  %rax = M[0x203157 + 0x400d34]  --->  %rax = M[0x603E8B]  //  %rip is the program counter; %rax is the return register for ints and pointers; does this set infile = stdin?

                                      mov %rax, 0x203180(%rip)  //  does this store infile in memory at some offset of the program counter?

                                      jmp 400dac  //  this is only executed when you don't provide an argument to bomb

----------------------------------
|                                |
|    return address = 400db1     |    callq 40163b <initialize_bomb>
|                                |
----------------------------------  <---  initialize_bomb(),  %rsp = 0x7FFFFFFFE784
|                                |
|          saved %rbp            |    push %rbp
|                                |
----------------------------------  <---  %rsp = 0x7FFFFFFFE780
|                                |
|          saved %rbx            |    push %rbx
|                                |
----------------------------------  <---  %rsp = 0x7FFFFFFFE77C
|                                |
|              ...               |    sub $0x2048, %rsp  --->  %rsp -= 8264  //  this has the effect of creating 2066 "slots" for storing values on the stack (8264 / 4)
|                                |
----------------------------------  <---  %rsp = 0x7FFFFFFFC734
                                  
                                      mov $0x4016f8, %esi  --->  %esi = 0x4016f8  //  0x4016f8 is the address of the sig_handler() function

                                      mov $0x2, %edi  --->  %edi = 2  //  signal 2 is SIGINT

----------------------------------
|                                |
|    return address = 401653     |    callq  400bb8 <signal@plt>  --->  signal(2, sig_handler)  //  if bomb encounters a SIGINT, call sig_handler()
|                                |
----------------------------------  <---  %rsp = 0x7FFFFFFFC730
                                  
                                      ... eventually initialize_bomb() returns to main() at address 400db1:

----------------------------------  <---  main() at 400db1
|                                |
|              ...               |
|                                |
----------------------------------  <---  %rsp = 0x7FFFFFFFE788




    *** *** *** *** ***    BEGIN BETTER TRACKING    *** *** *** *** ***




                                      ... eventually main() calls read_line() to get your input for phase 2

                                      mov %rax, %rdi  //  your input is stored in %rdi, which is the conventional 1st argument

                                      callq 40105a <phase_2>

----------------------------------  <---  phase_2()
|                                |
|          saved %rbp            |    push %rbp (memory address = 0x7FFFFFFFE778)
|                                |
----------------------------------  <---  %rsp = 0x7FFFFFFFE770  //  this is the first place where you have the correct value for %rsp
|                                |
|          saved %rbx            |    push %rbx (memory address = 0x7FFFFFFFE770)
|                                |
----------------------------------  <---  %rsp = 0x7FFFFFFFE768
                                  
                                      sub $0x28, %rsp  --->  %rsp -= 40  //  create space for 5, 8-byte "slots" on the stack

----------------------------------
|                                |
|                                |    (memory address = 0x7FFFFFFFE768)
|                                |
----------------------------------  <---  %rsp = 0x7FFFFFFFE760
|                                |
|                                |    (memory address = 0x7FFFFFFFE760)
|                                |
----------------------------------  <---  %rsp = 0x7FFFFFFFE758
|                                |
|                                |    (memory address = 0x7FFFFFFFE758)
|                                |
----------------------------------  <---  %rsp = 0x7FFFFFFFE750
|                                |
|                                |    (memory address = 0x7FFFFFFFE750)
|                                |
----------------------------------  <---  %rsp = 0x7FFFFFFFE748
|                                |
|                                |    (memory address = 0x7FFFFFFFE748)
|                                |
----------------------------------  <---  %rsp = 0x7FFFFFFFE740
                                  
                                      mov %rsp, %rsi  ---> %rsi = 0x7FFFFFFFE740  //  move the stack pointer into %rsi, preparing it to be the 2nd argument?

----------------------------------
|                                |
|    return address = 401068     |    callq 401440 <read_six_numbers>  --->  read_six_numbers(%rdi, %rsi)  //  your input and the value of the stack pointer?
|                                |
----------------------------------  <---  %rsp = 0x7FFFFFFFE738
                                  
                                      sub $0x18, %rsp  --->  %rsp -= 24  //  create space for 3, 8-byte "slots" on the stack
                                  
----------------------------------
|                                |
|                                |    (memory address = 0x7FFFFFFFE738)
|                                |
----------------------------------  <---  %rsp = 0x7FFFFFFFE730
|                                |
|                                |    (memory address = 0x7FFFFFFFE730)
|                                |
----------------------------------  <---  %rsp = 0x7FFFFFFFE728
|                                |
|         0x7FFFFFFFE754         |    (memory address = 0x7FFFFFFFE728)
|                                |
----------------------------------  <---  %rsp = 0x7FFFFFFFE720
|                                |
|         0x7FFFFFFFE750         |    (memory address = 0x7FFFFFFFE720)
|                                |
----------------------------------
                                  
                                      mov %rsi, %rdx  --->  %rdx = 0x7FFFFFFFE740  //  preparing the 3rd argument?

                                      lea 0x4(%rsi), %rcx  --->  %rcx = 0x7FFFFFFFE744  //  preparing the 4th argument?

                                      lea 0x14(%rsi),%rax  --->  %rax = 0x7FFFFFFFE754

                                      mov %rax, 0x8(%rsp)  --->  store %rax in memory at address 0x7FFFFFFFE728

                                      lea 0x10(%rsi), %rax  --->  %rax = 0x7FFFFFFFE750

                                      mov %rax, (%rsp)  --->  store %rax in memory at address 0x7FFFFFFFE720

                                      lea 0xc(%rsi), %r9  --->  %r9 = 0x7FFFFFFFE74C  //  preparing the 6th argument?

                                      lea 0x8(%rsi), %r8  --->  %r8 = 0x7FFFFFFFE748  // preparing the 5th argument?

                                      mov $0x40249e, %esi  --->  %esi = 0x40249e  //  preparing the 2nd argument?

                                      mov $0x0, %eax  --->  %eax = 0x0  //  preparing the return value?
----------------------------------
|                                |
|    return address = 401473     |    callq 400ac8 <__isoc99_sscanf@plt>  --->  sscanf(%rdi, %esi)  //  your input, "%d %d %d %d %d %d", apparently six int*
|                                |
----------------------------------  <---  %rsp = 0x7FFFFFFFE718
                                  
                                      ...at some point, sscanf puts 0x6 into %eax (the return value)

                                      cmp $0x5, %eax  --->  do 0x6 - 0x5, then set ZF to 0 because they're not equal

                                      jg 40147d <read_six_numbers+0x3d>  --->  if (%eax was greater than 0x5) { go to 40147d }

                                      add $0x18, %rsp  --->  Based on gdb, %rsp is somehow 0x7fffffffe748 at this point

                                      retq  --->  %rsp += 0x8  //  But this puts the stack pointer at 0x7FFFFFFFE750, which makes no sense




    *** *** *** *** ***    BEGIN BETTER TRACKING    *** *** *** *** ***




Unfortunately gdb is giving inconsistent results for the value of %rsp after calling read_six_numbers(); however, (%rsp) is consistently 0x1

401068:	83 3c 24 01          	cmpl   $0x1,(%rsp)  --->  do 0x1 - 0x1, then set ZF to 1 because they're equal

40106c:	74 05                	je     401073 <phase_2+0x19>  --->  jump to address 401073

401073:	48 89 e5             	mov    %rsp,%rbp  --->  %rbp = 0x7fffffffe750  //  set the frame pointer equal to the stack pointer?

401076:	48 8d 5c 24 04       	lea    0x4(%rsp),%rbx  --->  %rbx = 0x7FFFFFFFE754

40107b:	48 83 c5 18          	add    $0x18,%rbp  --->  %rbp = 0x7FFFFFFFE768

40107f:	8b 43 fc             	mov    -0x4(%rbx),%eax  --->  %eax = (0x7FFFFFFFE754 - 4)  --->  %eax = (0x7FFFFFFFE750)  --->  %eax = 1  //  Are you sure?

401082:	01 c0                	add    %eax,%eax  --->  %eax = 2

401084:	39 03                	cmp    %eax,(%rbx)  --->  do (%rbx) - %eax




=====     Phase 5     =====




000000000040109d <phase_5>:
  40109d:	53                   	push   %rbx
  40109e:	48 83 ec 10          	sub    $0x10,%rsp
  4010a2:	48 89 fb             	mov    %rdi,%rbx					-->  %rbx = 0x4023D7  //  "??????"
  4010a5:	e8 86 01 00 00       	callq  401230 <string_length>
  4010aa:	83 f8 06             	cmp    $0x6,%eax
  4010ad:	74 05                	je     4010b4 <phase_5+0x17>
  4010af:	e8 56 03 00 00       	callq  40140a <explode_bomb>
  4010b4:	48 89 e0             	mov    %rsp,%rax 					-->  %rax = %rsp
  4010b7:	48 8d 73 06          	lea    0x6(%rbx),%rsi 				-->  %rsi = %rbx + 6
  4010bb:	ba 30 24 40 00       	mov    $0x402430,%edx				-->  %edx = 0x402430
  4010c0:	48 0f be 0b          	movsbq (%rbx),%rcx					-->  %rcx = (%rbx)    //  Load value from memory address %rbx and sign extend its LSB into %rcx
  4010c4:	83 e1 0f             	and    $0xf,%ecx					-->  %ecx = %ecx & 0xf
  4010c7:	0f b6 0c 0a          	movzbl (%rdx,%rcx,1),%ecx			-->  %ecx = ((%rcx * 1) + %rdx)  //  ...zero-extend the LSB into %ecx
  4010cb:	88 08                	mov    %cl,(%rax)					-->  (%rax) = %cl
  4010cd:	48 83 c3 01          	add    $0x1,%rbx					-->  %rbx += 1
  4010d1:	48 83 c0 01          	add    $0x1,%rax                    -->  %rax += 1
  4010d5:	48 39 f3             	cmp    %rsi,%rbx					-->  do %rbx - %rsi and set the condition codes
  4010d8:	75 e6                	jne    4010c0 <phase_5+0x23>		-->  if (%rbx != %rsi) { go to 4010c0 }
  4010da:	c6 44 24 06 00       	movb   $0x0,0x6(%rsp)				-->  0x6(%rsp) = 0
  4010df:	48 89 e7             	mov    %rsp,%rdi                    -->  %rdi = %rsp
  4010e2:	be dd 23 40 00       	mov    $0x4023dd,%esi				-->  %esi = 0x4023dd
  4010e7:	e8 60 01 00 00       	callq  40124c <strings_not_equal>
  4010ec:	85 c0                	test   %eax,%eax					-->  do %eax - %eax and set the condition codes
  4010ee:	74 05                	je     4010f5 <phase_5+0x58>		-->  if (ZF) { go to 4010f5 }  //  if (%eax == 0) { go to 4010f5 }
  4010f0:	e8 15 03 00 00       	callq  40140a <explode_bomb>
  4010f5:	48 83 c4 10          	add    $0x10,%rsp
  4010f9:	5b                   	pop    %rbx
  4010fa:	c3                   	retq   




before comparing %rbx and %rsi for equality, it will be necessary to add 1 (at least once) to %rbx

%rbx must equal %rsi

%rsp must become this: 0x4023dd

%rsp must become this: 0100 0000 0010 0011 1101 1101



















